// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])     // 输入值
        instruction[16], // Instruction for execution                   // 指令
        reset;           // Signals whether to re-start the current     // 是否重启
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output                              // 输出值
        writeM,          // Write to M?                                 // 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // 指令的最大地址 如果为1则是C指令, 为0则是A指令
    Not(in=instruction[15], out=isA);
    // 对isC再次取反, 判断是否C指令, 读者可以自行运行1或者0带入试下,
    Not(in=isA, out=isC);

    // A Register
    // 如果为A指令或者指令输出到A处理器 则将AR的laod位置1
    And(a=cinst, b=instrution[5], out=computea);
    Mux16(a=instruction, b=alu, sel=instruction[15], out=newa);
    Or(a=ainst, b=computea, out=loada);
    ARegister(in=newa, load=loada, out=a);

    // D Register
    // 如果C指令并且指令指定ALU输出存到AR 则将ALU的输出 输入到AR 否则将指令输入到AR
    And(a=instructon[4], b=cinst, out=loadd);
    DRegister(in=alu, load=loadd, out=d);
    
    // 1111 a ccccc ddd jjj
    //        
    // Alu
    Mux16(a=a, b=inM, sel=instruction[12], out=aorm);
    And(a=instruction[11], b=true, out=zx);
    And(a=instruction[10], b=true, out=nx);
    And(a=instruction[9], b=true, out=zy);
    And(a=instruction[8], b=true, out=ny);
    And(a=instruction[7], b=true, out=f);
    And(a=instruction[6], b=true, out=no);

    ALU(x=d, y=aorm, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=alu, zr=zr, ng=ng);
}